@inject ILogger<Details> Logger
@inject IJSRuntime JSRuntime
@inject IOrderService OrderService

@inherits BlazorAdmin.Helpers.BlazorComponent

@namespace BlazorAdmin.Pages.OrderPage

<div class="modal @_modalClass" tabindex="-1" role="dialog" style="display:@_modalDisplay">
    <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Order Details</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">

                @if (_item == null)
                {
                    <Spinner></Spinner>
                }
                else
                {
                    <div class="container">
                        <div class="row">
                            <div class="col-4">
                                <b>Buyer</b>
                                <br />
                                @_item.BuyerId
                            </div>
                            <div class="col-4">
                                <b>Order date</b>
                                <br />
                                @_item.OrderDate
                            </div>
                            <div class="col-4">
                                <b>Order status</b>
                                <br />
                                @if (_item.Status == 1)
                                {
                                    <span class="text-success">
                                        Approved
                                    </span>
                                }
                                else
                                {
                                    <span class="text-danger">
                                        Pending
                                    </span>
                                }
                            </div>
                        </div>

                        <table class="table table-striped mt-3 mb-3">
                            <thead class="table-dark">
                                <tr>
                                    <th colspan="2">Product</th>
                                    <th>Price</th>
                                    <th>Unit</th>
                                    <th>Total</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var orderItem in _item.OrderItems)
                                {
                                    <tr>
                                        <td class="align-middle">
                                            <img class="img-thumbnail" src="@($"{orderItem.PictureUrl}")">
                                        </td>
                                        <td class="align-middle">@orderItem.ProductName</td>
                                        <td class="align-middle">$ @orderItem.UnitPrice</td>
                                        <td class="align-middle">@orderItem.Units</td>
                                        <td class="align-middle">$ @Math.Round(orderItem.Units * orderItem.UnitPrice, 2).ToString("N2")</td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr>
                                    <th colspan="4"></th>
                                    <th>$ @_item.Total</th>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                }

            </div>
            <div class="modal-footer text-center">
                <button type="button" class="btn @_approveBtnType col-sm-4 col-12" @onclick="UpdateOrder">
                    @_approveBtnText
                </button>
            </div>
        </div>
    </div>
</div>

@if (_showDetailsModal)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    private string _modalDisplay = "none;";
    private string _modalClass = "";
    private bool _showDetailsModal = false;
    private OrderDetail _item = new OrderDetail();
    private Orders _order = new Orders();

    private string _approveBtnType = "btn-success";
    private string _approveBtnText = "Approve order";

    [Parameter]
    public EventCallback<string> OnSaveClick { get; set; }

    public async Task Open(int id)
    {
        Logger.LogInformation("Now loading... /Orders/Details/{Id}", id);

        await new Css(JSRuntime).HideBodyOverflow();

        _item = await OrderService.GetOrdersById(id);

        GeneretaApproveBtn();

        _modalDisplay = "block;";
        _modalClass = "Show";
        _showDetailsModal = true;

        StateHasChanged();
    }

    public async Task Close()
    {
        await new Css(JSRuntime).ShowBodyOverflow();

        _modalDisplay = "none";
        _modalClass = "";
        _showDetailsModal = false;
    }

    private async Task UpdateOrder()
    {
        _order.Id = _item.Id;
        _order.Status = _item.Status;
        _order = await OrderService.UpdateOrder(_order);
        _item = await OrderService.GetOrdersById(_item.Id);
        await OnSaveClick.InvokeAsync(null);
        GeneretaApproveBtn();
    }

    private void GeneretaApproveBtn()
    {
        if (_item.Status == 1)
        {
            _approveBtnType = "btn-danger";
            _approveBtnText = "Disapprove order";
        }
        else
        {
            _approveBtnType = "btn-success";
            _approveBtnText = "Approve order";
        }
    }
}
